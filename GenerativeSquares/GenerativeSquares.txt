PROMPT: **** create a generative art design using squares in the Processing programming language ****

Suggested follow up questions:

How can we modify the color scheme to create a more cohesive palette in the generative art?

What are some techniques to add randomness and unpredictability to the size and position of the squares?

Can we implement a way to save the artwork as a video instead of individual frames?
Here's a creative generative art design using squares in Processing that creates an interesting pattern with rotating squares of different sizes and colors:

float angle = 0;

void setup() {
  size(800, 800);
  rectMode(CENTER);  // Draw rectangles from their center
  background(0);     // Black background
  noStroke();        // Remove outlines
}

void draw() {
  // Add a subtle fade effect by drawing a semi-transparent background
  fill(0, 10);
  rect(0, 0, width*2, height*2);
  
  // Translate to center of window
  translate(width/2, height/2);
  
  // Create multiple rotating squares
  for (int i = 0; i < 12; i++) {
    // Rotate the entire coordinate system
    rotate(radians(angle + (i * 30)));
    
    // Calculate size and position based on sine wave
    float size = 100 + sin(radians(angle * 2)) * 50;
    float distance = 100 + cos(radians(angle * 3)) * 50;
    
    // Create color based on position
    float hue = (angle + i * 30) % 360;
    fill(hue, 200, 255, 150);
    colorMode(HSB, 360, 255, 255, 255);
    
    // Draw square
    pushMatrix();
    translate(distance, 0);
    rotate(radians(angle * 2));
    rect(0, 0, size, size);
    popMatrix();
  }
  
  angle += 0.5;  // Increment rotation angle
}

void mousePressed() {
  // Save the artwork when mouse is pressed
  save("square_art_" + frameCount + ".png");
}

Copy

Insert at cursor
processing
This program creates a dynamic, colorful pattern with the following features:

Multiple rotating squares that move in a circular pattern

Color changes using HSB color mode for smooth transitions

Size variations using sine waves

A subtle fade effect using semi-transparent background

Option to save the artwork by clicking the mouse

You can modify the code to create different effects:

// For a different variation, try this alternative version
float angle = 0;

void setup() {
  size(800, 800);
  rectMode(CENTER);
  background(0);
  noStroke();
}

void draw() {
  // Create trailing effect
  fill(0, 20);
  rect(width/2, height/2, width, height);
  
  translate(width/2, height/2);
  
  for (int i = 0; i < 8; i++) {
    pushMatrix();
    rotate(TWO_PI * i / 8 + radians(angle));
    
    // Create multiple squares at different distances
    for (int j = 0; j < 5; j++) {
      float distance = j * 50 + sin(radians(angle * 2)) * 20;
      float size = 50 - j * 8;
      
      // Color based on position and time
      colorMode(HSB, 255);
      fill(((angle + i * 30) % 255), 255, 255, 150);
      
      translate(distance, 0);
      rotate(radians(angle));
      rect(0, 0, size, size);
    }
    popMatrix();
  }
  
  angle += 1;
}

Copy

Insert at cursor
processing
This second version creates a different pattern with:

Multiple arms of squares rotating around the center

Squares that get smaller as they move outward

Dynamic movement using sine waves

Color transitions throughout the rotation

Feel free to experiment with the parameters like:

Number of squares (change the loop counters)

Rotation speed (modify the angle increment)

Colors (adjust the HSB values)

Sizes and distances

Transparency levels

The generative art will continue to evolve as long as the program runs, creating unique patterns over time.

create a generative art design using squares in the Processing programming language



